#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <unordered_set>
#include <vector>
#include <algorithm> // For find
#include <stdexcept> // For exception handling

using namespace std;

class FileHandler {
private:
    string filePath;

public:
    // Constructor to initialize file path
    FileHandler(const string& path) : filePath(path) {}

    // Function to convert string to integer with error handling
    int stringToInt(const string& str) const {
        try {
            return stoi(str);
        } catch (invalid_argument& e) {
            cerr << "Invalid number format: " << str << ". Setting to 0.\n";
            return 0;
        } catch (out_of_range& e) {
            cerr << "Number out of range: " << str << ". Setting to 0.\n";
            return 0;
        }
    }

    // Function to count unique stops using unordered_set for efficiency
    int countUniqueStops() const {
        ifstream file(filePath);
        string line;
        unordered_set<int> stops;

        if (!file.is_open()) {
            throw runtime_error("Error opening file for counting unique stops!");
        }

        getline(file, line); // Skip the header
        while (getline(file, line)) {
            stringstream ss(line);
            string from, to, distance;
            if (!getline(ss, from, ',') || !getline(ss, to, ',') || !getline(ss, distance, ',')) {
                cerr << "Malformed line: " << line << ". Skipping.\n";
                continue; // Skip malformed lines
            }

            int fromStop = stringToInt(from);
            int toStop = stringToInt(to);

            stops.insert(fromStop);
            stops.insert(toStop);
        }

        file.close();
        return stops.size();
    }

    // Function to load graph data from the CSV file
    // Assumes that Graph class and addEdge method are defined elsewhere
    void loadGraphFromFile(class Graph& graph) const {
        ifstream file(filePath);
        string line;

        if (!file.is_open()) {
            throw runtime_error("Error opening file for loading graph data!");
        }

        getline(file, line); // Skip the header
        while (getline(file, line)) {
            stringstream ss(line);
            string from, to, distance;
            if (!getline(ss, from, ',') || !getline(ss, to, ',') || !getline(ss, distance, ',')) {
                cerr << "Malformed line: " << line << ". Skipping.\n";
                continue; // Skip malformed lines
            }

            int fromStop = stringToInt(from);
            int toStop = stringToInt(to);
            int dist = stringToInt(distance);

            if (fromStop < 0 || toStop < 0 || dist < 0) {
                cerr << "Invalid data in line: " << line << ". Skipping.\n";
                continue; // Skip invalid data
            }

            graph.addEdge(fromStop, toStop, dist);
        }

        file.close();
    }

    // Function to print all bus stop data from the CSV file
    void printAllBusData() const {
        ifstream file(filePath);
        string line;

        if (!file.is_open()) {
            cerr << "Error opening file for reading!\n";
            return;
        }

        cout << "Bus Stop Data:\n";
        cout << "From Stop, To Stop, Distance\n";

        // Optionally, print the header if present
        getline(file, line); // Skip the header
        // Uncomment the next line if you want to print the header
        // cout << line << endl;

        while (getline(file, line)) {
            cout << line << endl;
        }

        file.close();
    }
};




class Graph {
public:
    int V; // Number of vertices
    Node** adjList;

    Graph(int vertices) {
        V = vertices;
        adjList = new Node*[V];
        for (int i = 0; i < V; i++) {
            adjList[i] = NULL;
        }
    }

    // Add edge to the graph 
    void addEdge(int from, int to, int weight) {
        Node* newNode = new Node;
        newNode->vertex = to;
        newNode->weight = weight;
        newNode->next = adjList[from];
        adjList[from] = newNode;

        // Undirected graph: add edge both ways
        newNode = new Node;
        newNode->vertex = from;
        newNode->weight = weight;
        newNode->next = adjList[to];
        adjList[to] = newNode;
    }

    // Dijkstra's Algorithm
    int dijkstra(int src, int dest) {
        int dist[V];        // Stores shortest distances
        bool visited[V];    // Tracks visited nodes

        for (int i = 0; i < V; i++) {
            dist[i] = INT_MAX;
            visited[i] = false;
        }
        dist[src] = 0; // Distance to the source is 0

        for (int count = 0; count < V - 1; count++) {
            int u = -1;
            for (int i = 0; i < V; i++) {
                if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
                    u = i;
                }
            }

            if (u == -1) break; // All reachable nodes have been visited

            visited[u] = true;

            Node* temp = adjList[u];
            while (temp != NULL) {
                int v = temp->vertex;
                int weight = temp->weight;

                if (!visited[v] && dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
                temp = temp->next;
            }
        }

        return dist[dest];
    }
void addNode() {
        n++;
        for (int i = 0; i < matrix.size(); i++) {
            matrix[i].push_back(INT_MAX); // Add new column
        }
        matrix.push_back(vector<int>(n, INT_MAX)); // Add new row
        matrix[n - 1][n - 1] = 0; // Distance from the new node to itself is 0
    }

    // Delete a node (bus stop) by index
    void deleteNode(int nodeIndex) {
        if (nodeIndex >= n || nodeIndex < 0) {
            cout << "Invalid node index.\n";
            return;
        }
// In-order traversal for displaying the tree
void inOrderTraversal(AVLNode* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        cout << "Stop Name: " << root->stopName << ", Average Distance: " << root->avgDistance << "\n";
        inOrderTraversal(root->right);
    }
}
// Pre-order traversal for AVL Tree
void preOrderTraversal(AVLNode* root) {
    if (root != NULL) {
        cout << "Stop Name: " << root->stopName << ", Average Distance: " << root->avgDistance << "\n";
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}

// Post-order traversal for AVL Tree
void postOrderTraversal(AVLNode* root) {
    if (root != NULL) {
        postOrderTraversal(root->left);
        postOrderTraversal(root->right);
        cout << "Stop Name: " << root->stopName << ", Average Distance: " << root->avgDistance << "\n";
    }
}

AVLNode* createAVLTreeFromCSV(const string& filename) {
    ifstream file("C:\\Users\\Dell\\Desktop\\DSAproject\\bus_stops.csv");
    string line;
    AVLNode* root = NULL;
    map<int, vector<pair<int, int> > > adjacencyList; // Stop ID -> [(Adjacent Stop ID, Distance)]
    map<int, string> stopNames;                    // Stop ID -> Stop Name

    if (!file.is_open()) {
        cout << "Error opening file!\n";
        return NULL;
    }
}
void collectNodes(AVLNode* root, vector<AVLNode*>& nodes) {
    if (root != NULL) {
        collectNodes(root->left, nodes);
        nodes.push_back(root);
        collectNodes(root->right, nodes);
    }
}
void bubbleSort(vector<AVLNode*>& nodes) {
    int n = nodes.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (nodes[j]->avgDistance > nodes[j + 1]->avgDistance) {
                swap(nodes[j], nodes[j + 1]);
            }
        }
    }
}

void insertionSort(vector<AVLNode*>& nodes) {
    int n = nodes.size();
    for (int i = 1; i < n; i++) {
        AVLNode* key = nodes[i];
        int j = i - 1;
        while (j >= 0 && nodes[j]->avgDistance > key->avgDistance) {
            nodes[j + 1] = nodes[j];
            j--;
        }
        nodes[j + 1] = key;
    }
}

void select
        // Erase the row corresponding to nodeIndex
        matrix.erase(matrix.begin() + nodeIndex);

        // Erase the column corresponding to nodeIndex in each remaining row
        for (int i = 0; i < matrix.size(); i++) {
            matrix[i].erase(matrix[i].begin() + nodeIndex);
        }

        n--; // Decrease the number of vertices
    }
    // Destructor to clean up memory
    ~Graph() {
        for (int i = 0; i < V; i++) {
            Node* temp = adjList[i];
            while (temp != NULL) {
                Node* toDelete = temp;
                temp = temp->next;
                delete toDelete;
            }
        }
        delete[] adjList;
    }
};
void collectNodes(AVLNode* root, vector<AVLNode*>& nodes) {
    if (root != NULL) {
        collectNodes(root->left, nodes);
        nodes.push_back(root);
        collectNodes(root->right, nodes);
    }
}


int main() {
    // File path (replace with your actual file path)
    string filename = "C:\\Users\\Dell\\Desktop\\DSAproject\\bus_stops.csv";

    // Graph initialization
    Graph graph;

    // Create AVL Tree from CSV and initialize the graph
    cout << "Loading data from CSV file...\n";
    AVLNode* avlRoot = createAVLTreeFromCSV(filename, graph);
    if (!avlRoot) {
        cout << "Failed to load data from CSV. Exiting program.\n";
        return 1;
    }

    cout << "Data loaded successfully!\n\n";

    // Menu-driven program
    int choice;
    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\nGraph Adjacency Matrix:\n";
                graph.displayGraph();
                break;

            case 2:
                cout << "\nIn-Order Traversal of AVL Tree:\n";
                inOrderTraversal(avlRoot);
                cout << endl;
                break;

            case 3:
                cout << "\nPre-Order Traversal of AVL Tree:\n";
                preOrderTraversal(avlRoot);
                cout << endl;
                break;

            case 4:
                cout << "\nPost-Order Traversal of AVL Tree:\n";
                postOrderTraversal(avlRoot);
                cout << endl;
                break;

            case 5:
                {
                    int nodeId;
                    cout << "\nEnter the node ID to delete from AVL Tree: ";
                    cin >> nodeId;
                    avlRoot = deleteNode(avlRoot, nodeId);
                    cout << "Node with ID " << nodeId << " deleted successfully (if existed).\n";
                }
                break;

            case 6:
                cout << "Exiting program. Goodbye!\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    // Cleanup memory
    delete avlRoot;
    return 0;
}

void displayMenu() {
    cout << "\n===== MENU =====\n";
    cout << "1. Display Graph Adjacency Matrix\n";
    cout << "2. Display In-Order Traversal of AVL Tree\n";
    cout << "3. Display Pre-Order Traversal of AVL Tree\n";
    cout << "4. Display Post-Order Traversal of AVL Tree\n";
    cout << "5. Delete a Node from AVL Tree\n";
    cout << "6. Exit\n";
    cout << "Enter your choice: ";
}

AVLNode* createAVLTreeFromCSV(const string& filename, Graph& graph) {
    ifstream file(filename);
    string line;
    AVLNode* root = nullptr;
    map<int, vector<pair<int, int>>> adjacencyList; // Stop ID -> [(Adjacent Stop ID, Distance)]
    map<int, string> stopNames;                    // Stop ID -> Stop Name

    if (!file.is_open()) {
        cout << "Error opening file!\n";
        return nullptr;
    }

    getline(file, line); // Skip the header
    while (getline(file, line)) {
        stringstream ss(line);
        string stopName, from, to, distance;

        getline(ss, stopName, ',');
        getline(ss, from, ',');
        getline(ss, to, ',');
        getline(ss, distance, ',');

        int fromStop = stoi(from);
        int toStop = stoi(to);
        int dist = stoi(distance);

        stopNames[fromStop] = stopName;
        adjacencyList[fromStop].push_back({toStop, dist});
        graph.addEdge(fromStop, toStop, dist);
    }
    file.close();

    for (const auto& [stopId, neighbors] : adjacencyList) {
        int totalDistance = 0;
        int count = neighbors.size();
        for (const auto& [adjStop, dist] : neighbors) {
            totalDistance += dist;
        }

        if (count > 0) {
            double avgDistance = static_cast<double>(totalDistance) / count;
            root = insert(root, avgDistance, stopId, stopNames[stopId]);
        }
    }

    return root;
}


